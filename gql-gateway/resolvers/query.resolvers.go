package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"
	"log"
	"strconv"

	"github.com/godfreyowidi/tiwabet-backend/gql-gateway/graph"
	model "github.com/godfreyowidi/tiwabet-backend/gql-gateway/model/dao"
	"github.com/godfreyowidi/tiwabet-backend/proto/userpb"
	"google.golang.org/grpc"
	"google.golang.org/grpc/connectivity"
	"google.golang.org/grpc/credentials/insecure"
)

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	// Ensure gRPC client conn
	if r.GrpcClient == nil || r.GrpcConn.GetState() == connectivity.Shutdown {
		var err error
		r.GrpcConn, err = grpc.Dial("localhost:50051", grpc.WithTransportCredentials(insecure.NewCredentials()))
		if err != nil {
			log.Printf("Failed to connect to gRPC server: %v", err)
			return nil, err
		}
		r.GrpcClient = userpb.NewUserServiceClient(r.GrpcConn)
	}

	// Call ListUsers gRPC method
	res, err := r.GrpcClient.ListUsers(ctx, &userpb.ListUsersRequest{})
	if err != nil {
		log.Printf("Error calling ListUsers: %v", err)
		return nil, err
	}

	var users []*model.User
	for _, u := range res.Users {
		users = append(users, &model.User{
			ID:    strconv.FormatInt(u.Id, 10),
			Name:  u.Name,
			Email: u.Email,
		})
	}
	return users, nil
}

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
